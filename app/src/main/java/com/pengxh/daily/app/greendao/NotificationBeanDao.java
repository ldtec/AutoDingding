package com.pengxh.daily.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.pengxh.daily.app.bean.NotificationBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIFICATION_BEAN".
*/
public class NotificationBeanDao extends AbstractDao<NotificationBean, Long> {

    public static final String TABLENAME = "NOTIFICATION_BEAN";

    /**
     * Properties of entity NotificationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property NotificationTitle = new Property(3, String.class, "notificationTitle", false, "NOTIFICATION_TITLE");
        public final static Property NotificationMsg = new Property(4, String.class, "notificationMsg", false, "NOTIFICATION_MSG");
        public final static Property PostTime = new Property(5, String.class, "postTime", false, "POST_TIME");
    }


    public NotificationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIFICATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"PACKAGE_NAME\" TEXT," + // 2: packageName
                "\"NOTIFICATION_TITLE\" TEXT," + // 3: notificationTitle
                "\"NOTIFICATION_MSG\" TEXT," + // 4: notificationMsg
                "\"POST_TIME\" TEXT);"); // 5: postTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIFICATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotificationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String notificationTitle = entity.getNotificationTitle();
        if (notificationTitle != null) {
            stmt.bindString(4, notificationTitle);
        }
 
        String notificationMsg = entity.getNotificationMsg();
        if (notificationMsg != null) {
            stmt.bindString(5, notificationMsg);
        }
 
        String postTime = entity.getPostTime();
        if (postTime != null) {
            stmt.bindString(6, postTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotificationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String notificationTitle = entity.getNotificationTitle();
        if (notificationTitle != null) {
            stmt.bindString(4, notificationTitle);
        }
 
        String notificationMsg = entity.getNotificationMsg();
        if (notificationMsg != null) {
            stmt.bindString(5, notificationMsg);
        }
 
        String postTime = entity.getPostTime();
        if (postTime != null) {
            stmt.bindString(6, postTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NotificationBean readEntity(Cursor cursor, int offset) {
        NotificationBean entity = new NotificationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // notificationTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // notificationMsg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // postTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotificationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNotificationTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNotificationMsg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPostTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NotificationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NotificationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotificationBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
